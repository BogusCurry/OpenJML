Proving methods in openjml.clock.TickTockClockB3
Starting proof of openjml.clock.TickTockClockB3.TickTockClockB3() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB3.TickTockClockB3() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB3.getHour() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB3.getHour() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB3.getMinute() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB3.getMinute() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB3.getSecond() with prover z3_4_3

TRACE of openjml.clock.TickTockClockB3.getSecond()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40:  	return second;
			VALUE: second	 === 60
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:36:  	ensures 0 <= \result; 
			VALUE: 0	 === ???
			VALUE: \result	 === ???
			VALUE: 0 <= \result	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:37:  	ensures \result <= 59; 
			VALUE: \result	 === ???
			VALUE: 59	 === ???
			VALUE: \result <= 59	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40: warning: The prover cannot establish an assertion (Postcondition) in method getSecond
	public /*@ pure @*/ int getSecond() { return second; }
	                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:37: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40: 
	//@ ensures \result <= 59;
	    ^

TRACE of openjml.clock.TickTockClockB3.getSecond()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40:  	return second;
			VALUE: second	 === ( - 1 )
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:36:  	ensures 0 <= \result; 
			VALUE: 0	 === ???
			VALUE: \result	 === ???
			VALUE: 0 <= \result	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40: warning: The prover cannot establish an assertion (Postcondition) in method getSecond
	public /*@ pure @*/ int getSecond() { return second; }
	                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:36: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:40: 
	//@ ensures 0 <= \result;
	    ^
Completed proof of openjml.clock.TickTockClockB3.getSecond() with prover z3_4_3 - with warnings
Starting proof of openjml.clock.TickTockClockB3.tick() with prover z3_4_3

TRACE of openjml.clock.TickTockClockB3.tick()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 13
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 13
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 60
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 60
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === false
			VALUE: 0 <= minute && minute <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:42:  	requires getSecond() < 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() < 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 13
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 13
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 60
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 60
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === false
			VALUE: 0 <= minute && minute <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:49:  	requires getSecond() == 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() == 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 13
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 13
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 60
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 60
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === false
			VALUE: 0 <= minute && minute <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:55:  	second++
			VALUE: second	 === 60
			VALUE: second++	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	if (second == 60) ...
			VALUE: second	 === 60
			VALUE: 60	 === 60
			VALUE: second == 60	 === true
			VALUE: (second == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	minute++
			VALUE: minute	 === 60
			VALUE: minute++	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	@Ghost 
int s = (\lbl SECOND getSecond())
			VALUE: getSecond()	 === 0
			VALUE: \lbl SECOND getSecond()	 === 0
			VALUE: (\lbl SECOND getSecond())	 === 0
			VALUE: s	 === 0
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 13
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 13
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 60
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 60
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === false
			VALUE: 0 <= minute && minute <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56: warning: The prover cannot establish an assertion (InvariantLeaveCaller) in method tick
		if (second == 60) { minute++; /*@ ghost int s = (\lbl SECOND getSecond()); */ }
		                                                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56: 
	//@ public invariant 0 <= minute && minute <= 59;
	           ^

TRACE of openjml.clock.TickTockClockB3.tick()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 9
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 9
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 23
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 23
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:42:  	requires getSecond() < 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() < 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 9
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 9
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 23
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 23
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:49:  	requires getSecond() == 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() == 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 9
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 9
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 23
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 23
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:55:  	second++
			VALUE: second	 === 60
			VALUE: second++	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	if (second == 60) ...
			VALUE: second	 === 60
			VALUE: 60	 === 60
			VALUE: second == 60	 === true
			VALUE: (second == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	minute++
			VALUE: minute	 === 23
			VALUE: minute++	 === ???
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56:  	@Ghost 
int s = (\lbl SECOND getSecond())
			VALUE: getSecond()	 === 0
			VALUE: \lbl SECOND getSecond()	 === 0
			VALUE: (\lbl SECOND getSecond())	 === 0
			VALUE: s	 === 0
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 9
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 9
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 23
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 23
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56: warning: The prover cannot establish an assertion (InvariantLeaveCaller) in method tick
		if (second == 60) { minute++; /*@ ghost int s = (\lbl SECOND getSecond()); */ }
		                                                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:15: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB3.java:56: 
	//@ public invariant 0 <= second && second <= 59;
	           ^
Completed proof of openjml.clock.TickTockClockB3.tick() with prover z3_4_3 - with warnings
Completed proving methods in openjml.clock.TickTockClockB3
8 warnings
