                                           DATE: 8 December 2007
                                           AUTHOR: David R. Cok
                                           COPYRIGHT: (c) 2007 David Cok

This file describes a completely rewritten JML tool (called OpenJML) based
on the OpenJDK release of the Java tool set (http://openjdk.java.net).  It is
an extension of the GPL source available through OpenJDK.  The source code for
this tool is kept at sourceforge (see www.jmlspecs.org, 
http://sourceforge.net/projects/jmlspecs/, and
http://jmlspecs.svn.sourceforge.net/viewvc/jmlspecs/OpenJML/ ).

The OpenJML tool is a JML syntax and semantics checker.  It does not (at
present) do runtime assertion checking or static reasoning, nor does it do
Java code generation. 
Also, it is only a command-line tool and has no integration with any IDE.
It does intend to parse and check all aspects of JML as they are defined in the
JML reference manual (cf. http://www.jmlspecs.org), though that is an ongoing
project.  (please report any difficulties or bugs)

As is the case for the OpenJDK code, the OpenJML tool is run with a 1.6
version of Java.  At present it cannot be run to check files against a set
of Java 1.4 libraries.

The gzipped tar file containing a release of OpenJML contains
	openjml.jar
	jmlspecs.jar
	jmlruntime.jar
	README   (this file)

INSTALLATION:

To install OpenJML, simply gunzip and untar the distribution file into a 
directory of your choice (call it $OPENJML).  Then you can run the tool
simply using the command (your java installation must be version 1.6):

	java -jar $OPENJML/openjml.jar

That command alone will show you a list of Java and JML command-line options.
To run OpenJML on a specific set of files, you need to, in the conventional
manner, specify
	the classpath to use, using the -classpath option 
	the sourcepath to use, using the -sourcepath option
	the specification files to use, using the -specs option
	the files to check, listed on the command-line by file name

A typical simple scenario might be:
	java -jar $OPENJML/openjml.jar -classpath . *.java


THE FILES:

      These are conventional Java files for which either
a) the Java files contain JML specifications directly, or
b) there are specification files on the specs path with names corresponding
to the Java files names (e.g. A.spec for A.java).  If you mix Java files and
specification files in the same directory, be careful of the precedence of
JML file suffixes.



THE SPECS PATH:  

    The openjml.jar contains an internal copy of some Java
library specification files.  By default those will be used, but you can
supply your own directories containing specifications for your own classes
using the -specs option.  For example:
	-specs ".;mySpecsDir;$OPENJML/jmlspecs.jar"
By default, the internal specs are appended to any specifications you 
provide (you can turn this off with -noInternalSpecs).  Also, if you do not
provide an explicit -specs option, the value of org.jmlspecs.specspath is
used, else the value of -sourcepath, else the value of -classpath, else the
value of java.class.path.

If you supply a value for the Java property org.jmlspecs.system.specs, that
path will be used in place of the internal system specs.

Typically, if you specify an explicit specs path, you will want to include
on that path any directory entries from the classpath that contain your own
source code and exclude 3rd party and system libraries.


THE CLASSPATH:

Just as when compiling source code with javac, the classpath lists
directories in which one can find the Java files (by fully-qualified file
name) that are referenced by the files that are being compiled.

Note that the OpenJML tool needs a few classes to be available to it at
runtime.  These are included in the openjml.jar and are incorporated into
the classpath automatically.  The same files are present in jmlruntime.jar,
in case it is desired to include them explicitly.  The internal files can
be excluded using the -noInternalRuntime option.


THE SOURCEPATH:

The sourcepath is not commonly used, but can be used to distinguish where
source files are to be found (the source path) and where class files are
to be found (the classpath).


THE jmlruntime.jar:

This contains some compiled classes that the OpenJML tool needs on the 
classpath.  These classes are included by appending them
to the user's classpath automatically, so normally the user need not be
concerned with this jar file.  If for some reason you use the -noInternalRuntime
option, you may need to include jmlruntime.jar on the classpath explicitly.


THE jmlspecs.jar:

This file contains a copy of the 1.6 JML system specs, such as they are.
This is by no means a complete set, and includes a number of unmodified files
from 1.4 (which, if referenced, may give errors related to type generics).
The system specs are also part of openjml.jar and are included automatically,
so in simple uses the user need not be concerned with jmlspecs.jar.  However
if you wish to alter the specs or supply your own, you may wish to make use
of the contents of this jar file.

STATUS OF THIS RELEASE

This release is alpha quality.  Barring bugs, a valid Java/JML file will be
parsed without errors, with at least these exceptions: the .. token in array ranges must
sometimes be preceded by whitespace (e.g. a[0..5] is likely to fail); name lookup
and type checking for old constructs with a label; JML comments may not be
terminated by @+*/ ;  JML specs for anonymous classes are not read; matching of
specs from a spec file to the signature in a Java file is fragile for generic methods.

Some JML constructs are merely skipped over
by the parser, including at least: model programs; accessible, callable, 
captures clauses; for suffix of constraint clauses; only the first file of a
specification sequence is used; JML in javadoc comments is ignored, as are
method specifications that follow the method signature;

Typechecking is in place for most JML constructs.  Omissions include at least
accessible, callable, captures clauses; in and maps clauses.

Although the -rac option is present, the implementation of runtime
assertion checking is rudimentary.  With -rac enabled, compiled output files
are produced that include some runtime checks, but no specification 
inheritance is implemented.

The -esc option is also present, but this is very preliminary and does nothing
useful for the user (and will probably crash).

Your feedback and comments are welcome.

