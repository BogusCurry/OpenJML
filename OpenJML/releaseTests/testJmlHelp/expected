Usage: openjml <options> <source files>
where possible options include:
  -g                         Generate all debugging info
  -g:none                    Generate no debugging info
  -g:{lines,vars,source}     Generate only some debugging info
  -nowarn                    Generate no warnings
  -verbose                   Output messages about what the compiler is doing
  -deprecation               Output source locations where deprecated APIs are used
  -classpath <path>          Specify where to find user class files and annotation processors
  -cp <path>                 Specify where to find user class files and annotation processors
  -sourcepath <path>         Specify where to find input source files
  -bootclasspath <path>      Override location of bootstrap class files
  -extdirs <dirs>            Override location of installed extensions
  -endorseddirs <dirs>       Override location of endorsed standards path
  -proc:{none,only}          Control whether annotation processing and/or compilation is done.
  -processor <class1>[,<class2>,<class3>...] Names of the annotation processors to run; bypasses default discovery process
  -processorpath <path>      Specify where to find annotation processors
  -d <directory>             Specify where to place generated class files
  -s <directory>             Specify where to place generated source files
  -implicit:{none,class}     Specify whether or not to generate class files for implicitly referenced files
  -encoding <encoding>       Specify character encoding used by source files
  -source <release>          Provide source compatibility with specified release
  -target <release>          Generate class files for specific VM version
  -version                   Version information
  -help                      Print a synopsis of standard options
  -Akey[=value]              Options to pass to annotation processors
  -X                         Print a synopsis of nonstandard options
  -J<flag>                   Pass <flag> directly to the runtime system
  -Werror                    Terminate compilation if warnings occur
  @<filename>                Read options and filenames from file

JML options:
  -dir                       Process all files, recursively, within this directory
  -dirs                      Process all files, recursively, within these directories (listed as separate arguments, up to an argument that begins with a - sign)
  -command                   The command to execute (check,esc,rac,compile)
  -check                     Does a JML syntax check - abbreviation for -command check
  -compile                   Does a Java-only compiler - abbreviation for -command compile
  -rac                       Enables generating code instrumented with runtime assertion checks - abbreviation for -command rac
  -esc                       Enables static checking - abbreviation for -command esc
  -java                      When on, the tool uses only the underlying javac or javadoc compiler (must be the first option)
  -noJML                     When on, the JML compiler is used, but all JML constructs are ignored
  -specspath                 Specifies the directory path to search for specification files
  -noCheckSpecsPath          When on, no warnings for non-existent specification path directories are issued
  -noPurityCheck             When on, no warnings for use of impure methods are issued
  -showNotImplemented        When on, warnings about unimplemented constructs are issued
  -stopIfParseErrors         When enabled, stops after parsing if any files have parsing errors
  -noInternalSpecs           Disables automatically appending the internal specs directory to the specification path
  -noInternalRuntime         Disables automatically appending the internal JML runtime library to the classpath
  -nonnullByDefault          Makes references non_null by default
  -nullableByDefault         Makes references nullable by default
  -keys                      Identifiers for optional JML comments
  -jmlverbose                Like -verbose, but only jml information and not as much (included in -verbose)
  -jmltesting                Only used to generate tracing information during testing
  -progress                  Shows progress through compilation phases, includes -jmlverbose
  -trace                     ESC: Enables tracing of counterexamples
  -showbb                    ESC: Debug output of Basic Block program
  -counterexample            ESC: Enables output of complete, raw counterexample
  -subexpressions            ESC: Enables tracing with subexpressions
  -jmldebug                  When on, the program emits lots of output (includes -progress)
  -roots                     Enables the Reflective Object-Oriented Testing System---w00t!
  --                         Terminates option processing - all remaining arguments are files
  -crossRefAssociatedInfo    >...
  -method                    The method name on which to run ESC
  -prover                    The prover to use to check verification conditions
