Proving methods in openjml.clock.TickTockClockB1
Starting proof of openjml.clock.TickTockClockB1.TickTockClockB1() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB1.TickTockClockB1() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB1.getHour() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB1.getHour() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB1.getMinute() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB1.getMinute() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB1.getSecond() with prover z3_4_3
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.clock.TickTockClockB1.getSecond() with prover z3_4_3 - no warnings
Starting proof of openjml.clock.TickTockClockB1.tick() with prover z3_4_3

TRACE of openjml.clock.TickTockClockB1.tick()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 0
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 0
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 0
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 0
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:41:  	requires getSecond() < 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() < 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:48:  	requires getSecond() == 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() == 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:54:  	second++
			VALUE: second	 === 60
			VALUE: second++	 === 59
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	if (second == 60) ...
			VALUE: second	 === 60
			VALUE: 60	 === 60
			VALUE: second == 60	 === true
			VALUE: (second == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	minute++
			VALUE: minute	 === 60
			VALUE: minute++	 === 59
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	@Ghost 
int s = (\lbl SECOND second)
			VALUE: s	 === 60
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55: warning: Label SECOND has value 60
		if (second == 60) { minute++; /*@ ghost int s = (\lbl SECOND second); */ }
		                                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	if (minute == 60) ...
			VALUE: minute	 === 60
			VALUE: 60	 === 60
			VALUE: minute == 60	 === true
			VALUE: (minute == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	minute = 0
			VALUE: 0	 === 0
			VALUE: minute = 0	 === 0
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	hour++
			VALUE: hour	 === 24
			VALUE: hour++	 === 23
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:57:  	if (hour == 24) ...
			VALUE: hour	 === 24
			VALUE: 24	 === 24
			VALUE: hour == 24	 === true
			VALUE: (hour == 24)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:57:  	hour = 0
			VALUE: 0	 === 0
			VALUE: hour = 0	 === 0
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 0
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 0
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 0
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 0
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: warning: The prover cannot establish an assertion (InvariantExit) in method tick
	public void tick() {
	            ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: 
	//@ public invariant 0 <= second && second <= 59;
	           ^

TRACE of openjml.clock.TickTockClockB1.tick()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 23
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 23
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 0
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 0
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:41:  	requires getSecond() < 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() < 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:48:  	requires getSecond() == 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() == 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:54:  	second++
			VALUE: second	 === 60
			VALUE: second++	 === 59
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	if (second == 60) ...
			VALUE: second	 === 60
			VALUE: 60	 === 60
			VALUE: second == 60	 === true
			VALUE: (second == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	minute++
			VALUE: minute	 === 60
			VALUE: minute++	 === 59
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	@Ghost 
int s = (\lbl SECOND second)
			VALUE: s	 === 60
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55: warning: Label SECOND has value 60
		if (second == 60) { minute++; /*@ ghost int s = (\lbl SECOND second); */ }
		                                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	if (minute == 60) ...
			VALUE: minute	 === 60
			VALUE: 60	 === 60
			VALUE: minute == 60	 === true
			VALUE: (minute == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	minute = 0
			VALUE: 0	 === 0
			VALUE: minute = 0	 === 0
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	hour++
			VALUE: hour	 === 23
			VALUE: hour++	 === 22
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:57:  	if (hour == 24) ...
			VALUE: hour	 === 23
			VALUE: 24	 === 24
			VALUE: hour == 24	 === false
			VALUE: (hour == 24)	 === false
				Condition = false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 23
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 23
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 0
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 0
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: warning: The prover cannot establish an assertion (InvariantExit) in method tick
	public void tick() {
	            ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: 
	//@ public invariant 0 <= second && second <= 59;
	           ^

TRACE of openjml.clock.TickTockClockB1.tick()

..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 23
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 23
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 47
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 47
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:41:  	requires getSecond() < 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() < 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:48:  	requires getSecond() == 59; 
			VALUE: getSecond()	 === 59
			VALUE: 59	 === 59
			VALUE: getSecond() == 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:54:  	second++
			VALUE: second	 === 60
			VALUE: second++	 === 59
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	if (second == 60) ...
			VALUE: second	 === 60
			VALUE: 60	 === 60
			VALUE: second == 60	 === true
			VALUE: (second == 60)	 === true
				Condition = true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	minute++
			VALUE: minute	 === 47
			VALUE: minute++	 === 46
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55:  	@Ghost 
int s = (\lbl SECOND second)
			VALUE: s	 === 60
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:55: warning: Label SECOND has value 60
		if (second == 60) { minute++; /*@ ghost int s = (\lbl SECOND second); */ }
		                                                      ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:56:  	if (minute == 60) ...
			VALUE: minute	 === 47
			VALUE: 60	 === 60
			VALUE: minute == 60	 === false
			VALUE: (minute == 60)	 === false
				Condition = false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:57:  	if (hour == 24) ...
			VALUE: hour	 === 23
			VALUE: 24	 === 24
			VALUE: hour == 24	 === false
			VALUE: (hour == 24)	 === false
				Condition = false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:9:  	//@ public invariant 0 <= hour && hour <= 23; 
			VALUE: 0	 === 0
			VALUE: hour	 === 23
			VALUE: 0 <= hour	 === true
			VALUE: hour	 === 23
			VALUE: 23	 === 23
			VALUE: hour <= 23	 === true
			VALUE: 0 <= hour && hour <= 23	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:12:  	//@ public invariant 0 <= minute && minute <= 59; 
			VALUE: 0	 === 0
			VALUE: minute	 === 47
			VALUE: 0 <= minute	 === true
			VALUE: minute	 === 47
			VALUE: 59	 === 59
			VALUE: minute <= 59	 === true
			VALUE: 0 <= minute && minute <= 59	 === true
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15:  	//@ public invariant 0 <= second && second <= 59; 
			VALUE: 0	 === 0
			VALUE: second	 === 60
			VALUE: 0 <= second	 === true
			VALUE: second	 === 60
			VALUE: 59	 === 59
			VALUE: second <= 59	 === false
			VALUE: 0 <= second && second <= 59	 === false
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: warning: The prover cannot establish an assertion (InvariantExit) in method tick
	public void tick() {
	            ^
..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:15: warning: Associated declaration: ..\OpenJMLDemo\src\openjml\clock\TickTockClockB1.java:53: 
	//@ public invariant 0 <= second && second <= 59;
	           ^
Completed proof of openjml.clock.TickTockClockB1.tick() with prover z3_4_3 - with warnings
Completed proving methods in openjml.clock.TickTockClockB1
9 warnings
